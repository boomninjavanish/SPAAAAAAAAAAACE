package media.dunlap.space.voices;


/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.MixerMonoRamped;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.Divide;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.Add;
import com.jsyn.unitgen.SawtoothOscillator;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.jsyn.unitgen.RedNoise;
import com.softsynth.shared.time.TimeStamp;

public class RedShift extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SineOscillator mSineOsc;
    SineOscillator mSineOsc2;
    Add mAplus;
    Multiply mAtimes;
    RedNoise mRedNoise;
    SineOscillator mSineOsc3;
    Add mAplus2;
    Divide mAdivide;
    Divide mAdivide2;
    RedNoise mRedNoise2;
    MixerMonoRamped mMix4x1;
    SawtoothOscillator mSawOsc;
    SegmentedEnvelope mSegEnv;
    VariableRateMonoReader mMonoRdr;
    SegmentedEnvelope mSegEnv2;
    VariableRateMonoReader mMonoRdr2;

    // Declare inner classes for any child circuits.

    public RedShift() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        add(mSineOsc = new SineOscillator());
        add(mSineOsc2 = new SineOscillator());
        add(mAplus = new Add());
        add(mAtimes = new Multiply());
        add(mRedNoise = new RedNoise());
        add(mSineOsc3 = new SineOscillator());
        add(mAplus2 = new Add());
        add(mAdivide = new Divide());
        add(mAdivide2 = new Divide());
        add(mRedNoise2 = new RedNoise());
        add(mMix4x1 = new MixerMonoRamped(4));
        add(mSawOsc = new SawtoothOscillator());
        double[] mSegEnvData = {
            0.5, 1.0,
            0.5, 0.8,
            0.7549011499963294, 0.021367521367521368,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        add(mMonoRdr = new VariableRateMonoReader());
        double[] mSegEnv2Data = {
            0.5, 1.0,
            1.5071439271181952, 0.7682403433476395,
            0.3467179121514339, 0.717948717948718,
            0.30424397230996014, 0.8369098712446352,
            0.17671617583908628, 0.7081545064377682,
            0.357910661717566, 0.7424892703862661,
            0.19895366656338664, 0.6351931330472103,
            0.3600113966385079, 0.6952789699570815,
            0.1515837459530558, 0.6223175965665236,
            0.3991055103633294, 0.6824034334763949,
            0.20042175319819222, 0.48068669527896996,
            0.30731335490389444, 0.43776824034334766,
            0.38748205618317133, 0.5708154506437768,
            1.0852556610317468, 0.38626609442060084,
            1.201231257727918, 0.40772532188841204,
            0.7556789865654219, 0.03862660944206009,
        };
        mSegEnv2 = new SegmentedEnvelope( mSegEnv2Data );
        mSegEnv2.setSustainBegin( 1 );
        mSegEnv2.setSustainEnd( 10 );
        add(mMonoRdr2 = new VariableRateMonoReader());
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mAplus.inputB);
        mFrequencyPassThrough.output.connect(mAtimes.inputA);
        mFrequencyPassThrough.output.connect(mAdivide2.inputA);
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mAmplitudePassThrough.output.connect(mMonoRdr2.amplitude);
        mSineOsc.output.connect(mMix4x1.input);
        mSineOsc2.output.connect(mAplus.inputA);
        mAplus.output.connect(mSineOsc.frequency);
        mAtimes.output.connect(mSineOsc2.frequency);
        mAtimes.output.connect(mSineOsc2.amplitude);
        mAtimes.output.connect(mAdivide.inputA);
        mAtimes.output.connect(mSawOsc.frequency);
        mRedNoise.output.connect(mAplus2.inputA);
        mSineOsc3.output.connect(0, mMix4x1.input, 1);
        mAplus2.output.connect(mSineOsc3.frequency);
        mAdivide.output.connect(mRedNoise.frequency);
        mAdivide2.output.connect(mAplus2.inputB);
        mRedNoise2.output.connect(mAtimes.inputB);
        mMix4x1.output.connect(mOutputPassThrough.input);
        mSawOsc.output.connect(0, mMix4x1.input, 2);
        mMonoRdr.output.connect(mSineOsc3.amplitude);
        mMonoRdr.output.connect(mSawOsc.amplitude);
        mMonoRdr.output.connect(mSineOsc.amplitude);
        mMonoRdr2.output.connect(mRedNoise2.amplitude);
        mMonoRdr2.output.connect(mRedNoise.amplitude);
        // Setup
        frequency.setup(40.0, 1879.725548, 8000.0);
        amplitude.setup(0.0, 1.0, 1.0);
        mAdivide.inputB.set(2.0);
        mAdivide2.inputB.set(2.0);
        mRedNoise2.frequency.set(40.0);
        mMix4x1.input.set(3, 0.0);
        mMix4x1.gain.set(0.37070419299212065);
        mMix4x1.gain.set(1, 0.13549520213537875);
        mMix4x1.gain.set(2, 0.4324563992400677);
        mMix4x1.gain.set(3, 1.0);
        mMix4x1.amplitude.set(1.0);
        mMonoRdr.rate.set(1.0);
        mMonoRdr2.rate.set(1.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
        mMonoRdr2.dataQueue.queueOn( mSegEnv2, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
        mMonoRdr2.dataQueue.queueOff( mSegEnv2, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
