package media.dunlap.space.voices;


/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.MixerMonoRamped;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.Divide;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.SawtoothOscillator;
import com.jsyn.unitgen.Add;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.softsynth.shared.time.TimeStamp;

public class SuperSaw extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SegmentedEnvelope mSegEnv;
    VariableRateMonoReader mMonoRdr;
    SawtoothOscillator mSawOsc;
    PassThrough mOutputRPassThrough;
    public UnitOutputPort outputR;
    SawtoothOscillator mSawOsc2;
    Divide mAdivide;
    Divide mAdivide2;
    SawtoothOscillator mSawOsc3;
    SawtoothOscillator mSawOsc4;
    Divide mAdivide3;
    MixerMonoRamped mMix4x1;
    MixerMonoRamped mMix4x12;
    PassThrough mLowPassFreqPassThrough;
    public UnitInputPort lowPassFreq;
    FilterLowPass mLowPass;
    FilterLowPass mLowPass2;
    SineOscillator mSineOsc;
    SineOscillator mSineOsc2;
    Add mAplus;
    Multiply mAtimes;
    Add mAplus2;
    Multiply mAtimes2;
    PassThrough mQModMultiplierPassThrough;
    public UnitInputPort qModMultiplier;

    // Declare inner classes for any child circuits.

    public SuperSaw() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        double[] mSegEnvData = {
            1.1154038052055892, 1.0,
            2.1517898131481203, 1.0,
            2.7583169368499645, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        mSegEnv.setSustainBegin( 1 );
        mSegEnv.setSustainEnd( 1 );
        add(mMonoRdr = new VariableRateMonoReader());
        add(mSawOsc = new SawtoothOscillator());
        add(mOutputRPassThrough = new PassThrough());
        addPort( outputR = mOutputRPassThrough.output, "outputR");
        add(mSawOsc2 = new SawtoothOscillator());
        add(mAdivide = new Divide());
        add(mAdivide2 = new Divide());
        add(mSawOsc3 = new SawtoothOscillator());
        add(mSawOsc4 = new SawtoothOscillator());
        add(mAdivide3 = new Divide());
        add(mMix4x1 = new MixerMonoRamped(4));
        add(mMix4x12 = new MixerMonoRamped(4));
        add(mLowPassFreqPassThrough = new PassThrough());
        addPort(lowPassFreq = mLowPassFreqPassThrough.input, "lowPassFreq");
        add(mLowPass = new FilterLowPass());
        add(mLowPass2 = new FilterLowPass());
        add(mSineOsc = new SineOscillator());
        add(mSineOsc2 = new SineOscillator());
        add(mAplus = new Add());
        add(mAtimes = new Multiply());
        add(mAplus2 = new Add());
        add(mAtimes2 = new Multiply());
        add(mQModMultiplierPassThrough = new PassThrough());
        addPort(qModMultiplier = mQModMultiplierPassThrough.input, "qModMultiplier");
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mSawOsc.frequency);
        mFrequencyPassThrough.output.connect(mAdivide.inputA);
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mMonoRdr.output.connect(mSawOsc.amplitude);
        mMonoRdr.output.connect(mSawOsc2.amplitude);
        mMonoRdr.output.connect(mSawOsc3.amplitude);
        mMonoRdr.output.connect(mSawOsc4.amplitude);
        mSawOsc.output.connect(mMix4x1.input);
        mSawOsc.output.connect(mMix4x12.input);
        mSawOsc2.output.connect(0, mMix4x1.input, 1);
        mSawOsc2.output.connect(0, mMix4x12.input, 1);
        mAdivide.output.connect(mSawOsc2.frequency);
        mAdivide.output.connect(mAdivide2.inputA);
        mAdivide2.output.connect(mSawOsc3.frequency);
        mAdivide2.output.connect(mAdivide3.inputA);
        mSawOsc3.output.connect(0, mMix4x1.input, 2);
        mSawOsc3.output.connect(0, mMix4x12.input, 2);
        mSawOsc4.output.connect(0, mMix4x1.input, 3);
        mSawOsc4.output.connect(0, mMix4x12.input, 3);
        mAdivide3.output.connect(mSawOsc4.frequency);
        mMix4x1.output.connect(mLowPass.input);
        mMix4x12.output.connect(mLowPass2.input);
        mLowPassFreqPassThrough.output.connect(mLowPass.frequency);
        mLowPassFreqPassThrough.output.connect(mLowPass2.frequency);
        mLowPass.output.connect(mOutputPassThrough.input);
        mLowPass2.output.connect(mOutputRPassThrough.input);
        mSineOsc.output.connect(mAplus2.inputA);
        mSineOsc2.output.connect(mAplus.inputA);
        mAplus.output.connect(mAtimes.inputA);
        mAtimes.output.connect(mLowPass.Q);
        mAplus2.output.connect(mAtimes2.inputA);
        mAtimes2.output.connect(mLowPass2.Q);
        mQModMultiplierPassThrough.output.connect(mAtimes.inputB);
        mQModMultiplierPassThrough.output.connect(mAtimes2.inputB);
        // Setup
        frequency.setup(40.0, 880.0, 8000.0);
        amplitude.setup(0.0, 0.5, 1.0);
        mMonoRdr.rate.set(1.0);
        mAdivide.inputB.set(2.007);
        mAdivide2.inputB.set(2.001);
        mAdivide3.inputB.set(2.0131579);
        mMix4x1.gain.set(0.511409149454326);
        mMix4x1.gain.set(1, 0.795333122569144);
        mMix4x1.gain.set(2, 0.6553667064397011);
        mMix4x1.gain.set(3, 0.7491731757493119);
        mMix4x1.amplitude.set(0.2211083661621402);
        mMix4x12.gain.set(0.708735093634147);
        mMix4x12.gain.set(1, 0.34435386909971927);
        mMix4x12.gain.set(2, 0.360593140360576);
        mMix4x12.gain.set(3, 1.0);
        mMix4x12.amplitude.set(0.22528741983236938);
        lowPassFreq.setup(20.0, 3079.1378, 20000.0);
        mLowPass.amplitude.set(1.0);
        mLowPass2.amplitude.set(1.0);
        mSineOsc.frequency.set(0.04305741464885474);
        mSineOsc.amplitude.set(1.0);
        mSineOsc2.frequency.set(0.03863369650500291);
        mSineOsc2.amplitude.set(1.0);
        mAplus.inputB.set(1.0);
        mAplus2.inputB.set(1.0);
        qModMultiplier.setup(1.0, 5.0, 5.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
