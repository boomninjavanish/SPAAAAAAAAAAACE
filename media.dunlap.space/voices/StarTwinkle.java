package media.dunlap.space.voices;


/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.SquareOscillator;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.MixerMonoRamped;
import com.jsyn.unitgen.InterpolatingDelay;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.Divide;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;
import com.jsyn.unitgen.PulseOscillator;
import com.jsyn.unitgen.Pan;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.Add;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.softsynth.shared.time.TimeStamp;

public class StarTwinkle extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    VariableRateMonoReader mMonoRdr;
    SegmentedEnvelope mSegEnv;
    SquareOscillator mSquareOsc;
    SineOscillator mSineOsc;
    Multiply mAtimes;
    SquareOscillator mSquareOsc2;
    SineOscillator mSineOsc2;
    Divide mAdivide;
    Multiply mAtimes2;
    Pan mPan;
    MixerMonoRamped mMix4x1;
    PassThrough mOutputRPassThrough;
    public UnitOutputPort outputR;
    Add mAplus;
    Divide mAdivide2;
    PulseOscillator mPulseOsc;
    FilterLowPass mLowPass;
    FilterLowPass mLowPass2;
    InterpolatingDelay mDelay1;
    InterpolatingDelay mDelay12;
    PassThrough mDelayLPassThrough;
    public UnitInputPort delayL;
    PassThrough mDelayRPassThrough;
    public UnitInputPort delayR;

    // Declare inner classes for any child circuits.

    public StarTwinkle() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        add(mMonoRdr = new VariableRateMonoReader());
        double[] mSegEnvData = {
            0.0, 1.0,
            0.14550256424184385, 1.0,
            0.27692697668125216, 0.21030042918454936,
            0.5, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        mSegEnv.setSustainBegin( 4 );
        mSegEnv.setSustainEnd( 4 );
        add(mSquareOsc = new SquareOscillator());
        add(mSineOsc = new SineOscillator());
        add(mAtimes = new Multiply());
        add(mSquareOsc2 = new SquareOscillator());
        add(mSineOsc2 = new SineOscillator());
        add(mAdivide = new Divide());
        add(mAtimes2 = new Multiply());
        add(mPan = new Pan());
        add(mMix4x1 = new MixerMonoRamped(4));
        add(mOutputRPassThrough = new PassThrough());
        addPort( outputR = mOutputRPassThrough.output, "outputR");
        add(mAplus = new Add());
        add(mAdivide2 = new Divide());
        add(mPulseOsc = new PulseOscillator());
        add(mLowPass = new FilterLowPass());
        add(mLowPass2 = new FilterLowPass());
        add(mDelay1 = new InterpolatingDelay());
        add(mDelay12 = new InterpolatingDelay());
        add(mDelayLPassThrough = new PassThrough());
        addPort(delayL = mDelayLPassThrough.input, "delayL");
        add(mDelayRPassThrough = new PassThrough());
        addPort(delayR = mDelayRPassThrough.input, "delayR");
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mAtimes.inputA);
        mFrequencyPassThrough.output.connect(mSquareOsc.frequency);
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mMonoRdr.output.connect(mSineOsc.amplitude);
        mMonoRdr.output.connect(mSquareOsc.amplitude);
        mMonoRdr.output.connect(mSineOsc2.amplitude);
        mMonoRdr.output.connect(mSquareOsc2.amplitude);
        mSquareOsc.output.connect(0, mMix4x1.input, 1);
        mSineOsc.output.connect(mMix4x1.input);
        mAtimes.output.connect(mSineOsc.frequency);
        mAtimes.output.connect(mAdivide.inputA);
        mSquareOsc2.output.connect(0, mMix4x1.input, 3);
        mSineOsc2.output.connect(0, mMix4x1.input, 2);
        mAdivide.output.connect(mAtimes2.inputA);
        mAdivide.output.connect(mSineOsc2.frequency);
        mAtimes2.output.connect(mSquareOsc2.frequency);
        mPan.output.connect(mLowPass.input);
        mPan.output.connect(1, mLowPass2.input, 0);
        mMix4x1.output.connect(mPan.input);
        mAplus.output.connect(mAdivide2.inputA);
        mAdivide2.output.connect(mPan.pan);
        mPulseOsc.output.connect(mAplus.inputA);
        mLowPass.output.connect(mDelay1.input);
        mLowPass.output.connect(mOutputPassThrough.input);
        mLowPass2.output.connect(mDelay12.input);
        mLowPass2.output.connect(mOutputRPassThrough.input);
        mDelay1.output.connect(mOutputPassThrough.input);
        mDelay12.output.connect(mOutputRPassThrough.input);
        mDelayLPassThrough.output.connect(mDelay1.delay);
        mDelayRPassThrough.output.connect(mDelay12.delay);
        // Setup
        frequency.setup(20.0, 5038.900076, 20000.0);
        amplitude.setup(0.0, 1.0, 1.0);
        mMonoRdr.rate.set(1.0);
        mAtimes.inputB.set(1.5);
        mAdivide.inputB.set(2.005263198);
        mAtimes2.inputB.set(1.3);
        mMix4x1.gain.set(0.4836300420234993);
        mMix4x1.gain.set(1, 0.5366448085324746);
        mMix4x1.gain.set(2, 0.49829932969755714);
        mMix4x1.gain.set(3, 0.6584465934653863);
        mMix4x1.amplitude.set(0.24021901416910318);
        mAplus.inputB.set(1.0);
        mAdivide2.inputB.set(2.0);
        mPulseOsc.frequency.set(5.0);
        mPulseOsc.amplitude.set(1.0);
        mPulseOsc.width.set(0.0837321);
        mLowPass.frequency.set(12656.859352387559);
        mLowPass.amplitude.set(1.0);
        mLowPass.Q.set(0.66842137);
        mLowPass2.frequency.set(12738.801049704813);
        mLowPass2.amplitude.set(1.0);
        mLowPass2.Q.set(0.81052597);
        mDelay1.allocate(44100);
        mDelay12.allocate(44100);
        delayL.setup(0.0, 0.6842105, 1.0);
        delayR.setup(0.0, 0.0813397, 1.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
